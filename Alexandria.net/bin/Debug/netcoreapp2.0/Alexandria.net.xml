<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alexandria.net</name>
    </assembly>
    <members>
        <member name="T:Alexandria.net.API.WalletFunctions.Account">
            <inheritdoc />
            <summary>
            Wallet Account Functions 
            </summary>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.#ctor(Alexandria.net.Settings.IConfig)">
            <inheritdoc />
            <summary>
            Wallet Constructor
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.accountExists(System.String)">
            <summary>
            Returns true if an account with given name exists.
            </summary>
            <param name="accountName">Input string accountName</param>
            <returns>Returns true if success and false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.hasPrivateKeys(System.Byte[])">
            <summary>
            Returns true if the library has imported the private key corresponding to the given public key.
            </summary>
            <param name="key">Input byte[] key</param>
            <returns>Returns true if success and false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.hasAccountOwnerPrivateKey(System.String)">
            <summary>
            Returns true if the library has imported the private key corresponding to the account's owner key.In case of
            authorities consisting of more than one key(mutlisig), it returns true if and only if the library has
            sufificient keys to resolve the owner autority.
            </summary>
            <param name="accountName">Input string accountName</param>
            <returns>Returns true if success and false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.hasAccountActivePrivateKey(System.String)">
            <summary>
            Returns true if the library has imported the private key corresponding to the account's active key.In case of
            authorities consisting of more than one key(mutlisig), it returns true if and only if the library has
            sufficient keys to resolve the active autority.
            </summary>
            <param name="accountName">Input string accountName</param>
            <returns>Returns true if success and false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.hasAccountMemoPrivateKey(System.String)">
            <summary>
            Returns true if the library has imported the private key corresponding to the account's memo key.
            </summary>
            <param name="accountName">Input string accountName</param>
            <returns>Returns true if success and false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.getActiveAuthority(System.String)">
            <summary>
            Returns the active authority of the given account.Object authority has the following structure:
            </summary>
            <param name="accountName">Input string accountName</param>
            <returns>Returns the Json object with the details about the active authority</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.getOwnerAuthority(System.String)">
            <summary>
            Returns the owner authority of the given account.
            </summary>
            <param name="accountName">Input string accountName</param>
            <returns>Returns the Json object with the deails about the owner authority</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.getMemoKey(System.String)">
            <summary>
            Returns the memo key of the given account.
            </summary>
            <param name="accountName">Input string accountName</param>
            <returns>Returns the Memo Key of the corresponding account</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.getAccountBalance(System.String)">
            <summary>
            Get SPHTX balance of the account.
            </summary>
            <param name="accountName">Input string accountName</param>
            <returns>Returns the account balance as a Json object</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.getVestingBalance(System.String)">
            <summary>
            Get SPHTX balance of the vesting account.
            </summary>
            <param name="accountName">Input string accountName</param>
            <returns>Returns the account balance as a Json object</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.createSimpleAuthority(System.Byte[])">
            <summary>
            Creates authority resolvable with signature corresponding to the given pub_key.
            </summary>
            <param name="pubKey">Input byte[] pubKey</param>
            <returns>Returns Json object with details combining
            -WeightThreshold
            -AccountAuths
            -KeyAuths
            </returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.createSimpleMultisigAuthority(System.Collections.Generic.List{System.Byte[]},System.UInt64)">
            <summary>
            Creates authority resolvable with given number of signatures out of the given set of keys.
            </summary>
            <param name="pubKeys">Input List of Byte[] pubKeys</param>
            <param name="requiredSignatures">Input ulong requiredSignatures</param>
            <returns>Returns Json object with details combining
            -WeightThreshold
            -AccountAuths
            -KeyAuths
            </returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.createSimpleManagedAuthority(System.String)">
            <summary>
            Creates authority resolvable with a given managing account.
            </summary>
            <param name="managingAccountName">string managingAccountName</param>
            <returns>Returns Json object with details combining
            -WeightThreshold
            -AccountAuths
            -KeyAuths
            </returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.createSimpleMultiManagedAuthority(System.Collections.Generic.List{System.String},System.UInt32)">
            <summary>
            Creates authority resolvable with given number ofâ€‹ managing accounts.
            </summary>
            <param name="managingAccounts">Input List of string managingAccounts</param>
            <param name="requiredSignatures">Input uint requiredSignatures</param>
            <returns>Returns Json object with details combining
            -WeightThreshold
            -AccountAuths
            -KeyAuths
            </returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.updateAccount(System.String,Alexandria.net.Messaging.Responses.Authority,Alexandria.net.Messaging.Responses.Authority,System.Byte[])">
            <summary>
            Update account authorities.
            </summary>
            <param name="accountName">Input string accountName</param>
            <param name="owner">Input Authority owner</param>
            <param name="active">Input Authority active</param>
            <param name="memo">Input byte[] memo</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.depositVesting(System.String,System.UInt64)">
            <summary>
            Deposit to_vestings SPHTXs to vesting.
            </summary>
            <param name="accountName">Input string accountName</param>
            <param name="toVestings">Input ulong toVestings</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.withdrawVestings(System.String,System.UInt64)">
            <summary>
            Withdraw from_vestings vested SPHTXs.
            </summary>
            <param name="accountName">Input string accountName</param>
            <param name="fromVestings">Input ulong fromVestings</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.voteForWitness(System.String,System.String,System.String)">
            <summary>
            Vote or unvote a witness.
            </summary>
            <param name="votingAccountName">Input string votingAccountName</param>
            <param name="votedAccountName">Input string votedAccountName</param>
            <param name="approve">Input string approve</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.updateToWitness(System.String,System.String,System.Byte[])">
            <summary>
            Update an account to witness.Requires XXX vested SPHTX before updating.
            </summary>
            <param name="accountName">Inout string accountName</param>
            <param name="url">Input string url</param>
            <param name="blockKey">Input byte[] blockKey</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Account.createAccount(System.String,System.String,Alexandria.net.Messaging.Responses.Authority,Alexandria.net.Messaging.Responses.Authority,System.Byte[])">
            <summary>
            Creates new account in the SophiaTX blockchain.
            </summary>
            <param name="registeringAccountName">Input string registeringAccountName</param>
            <param name="newAccountName">Input string newAccountName</param>
            <param name="owner">Input Authority owner</param>
            <param name="active">Input Authority active</param>
            <param name="memo">Input byte[] memo</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="T:Alexandria.net.API.WalletFunctions.Asset">
            <inheritdoc />
            <summary>
            </summary>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Asset.#ctor(Alexandria.net.Settings.IConfig)">
            <summary>
            Wallet Constructor
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Asset.transfer(System.String,System.String,System.String,System.UInt64,System.String)">
            <summary>
            Trnasfer given assets from one user to other one.
            </summary>
            <param name="from">string from</param>
            <param name="to">string to</param>
            <param name="memo">string memo</param>
            <param name="balance">ulong balance</param>
            <param name="assetSymbol">string assetSymbol</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Asset.getAccountUiaBalance(System.String,System.String)">
            <summary>
            Returns the balance of the given account and UIA
            </summary>
            <param name="accountName">string accountName</param>
            <param name="assetSymbol">string assetSymbol</param>
            <returns>Returns retruns ulong Accournt balance</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Asset.createUia(System.String,Alexandria.net.Messaging.Responses.Authority,System.UInt64,System.String)">
            <summary>
            Create UIA for the given account authority
            </summary>
            <param name="ownerAccountName">string ownerAccountName</param>
            <param name="managementAuthority">Authority managementAuthority</param>
            <param name="maxSupply">ulong maxSupply</param>
            <param name="assetSymbol">string assetSymbol</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Asset.issueUia(System.String,System.UInt64,System.String)">
            <summary>
            Issues an UIA for the Receiver account of given ammount
            </summary>
            <param name="reveiverAccountName">string reveiverAccountName</param>
            <param name="amount">ulong amount</param>
            <param name="assetSymbol">string assetSymbol</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Asset.burnUia(System.String,System.UInt64,System.String)">
            <summary>
             Vanish given amount of UIA 
            </summary>
            <param name="accountName">string accountName</param>
            <param name="amount">ulong amount</param>
            <param name="assetSymbol">string assetSymbol</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Asset.getUiaAuthority(System.String)">
            <summary>
            Check for the authority assigned to given UIA, identify by Symbol
            </summary>
            <param name="assetSymbol">string assetSymbol</param>
            <returns>Returns Json object with details combining
            -WeightThreshold
            -AccountAuths
            -KeyAuths
            </returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Asset.hasUiaPrivateKey(System.String)">
            <summary>
            Checks if the given UIA has a private key, identify by Sumbol
            </summary>
            <param name="assetSymbol">string assetSymbol</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="T:Alexandria.net.API.WalletFunctions.Cryptography">
            <inheritdoc />
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.#ctor(Alexandria.net.Settings.IConfig)">
            <inheritdoc />
            <summary>
            Wallet Constructor
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.generateKeyPair">
            <summary>
            Generates new private/public key pair.
            </summary>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.generateKeyPairFromBrainKey(System.String)">
            <summary>
            Generates new private/public key pair from brian key.
            </summary>
            <param name="brainKey"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.signAndSendOperation(System.String,System.String)">
            <summary>
            Form a transaction containing a json-formatted operation, sign it with a given private key and send it to
            Generates new private/public key pair from brian key.
            
            </summary>
            <param name="operation"></param>
            <param name="privateKey"></param>
            <returns>Returns true is it was properly signes and accepted, false otherwise.</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.signAndSendTransaction(System.String,System.String)">
            <summary>
            Sing a json-formatted transaction with a given private key and send it to the network.
            </summary>
            <param name="transaction"></param>
            <param name="privateKey"></param>
            <remarks>Returns true is it was properly signes and accepted, false otherwise.</remarks>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.signDigest(System.Char[],System.String)">
            <summary>
            Sign given digest using provided private key.
            </summary>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.getPublicKey(System.String)">
            <summary>
            Generate public key part associated to the given private key.
            </summary>
            <param name="privateKey"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.fromBase58(System.String)">
            <summary>
            Decodes base58-encoded string.
            </summary>
            <param name="encodedData"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.toBase58(System.Collections.Generic.List{System.Char})">
            <summary>
            Encodes data to base58 string.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.verifySignature(System.Char[],System.Byte[],System.Char[])">
            <summary>
            Verify if the given public key corresponds to the private key used to sign the digest.
            </summary>
            <param name="digest"></param>
            <param name="pubKey"></param>
            <param name="signature"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.encryptDocument(System.String,System.String,System.String)">
            <summary>
            Encrypts the document in plaintext using shared secret constructed via sender's private key and receveir's public key.
            </summary>
            <param name="plaintext"></param>
            <param name="publicKey"></param>
            <param name="privateKey"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.decryptDocument(System.String,System.String,System.String)">
            <summary>
            Decrypts the encrypted data using shared secret constructed via receiver's private key and sender's public key
            or receiver's public key and sender's private key.
            </summary>
            <param name="encryptedText"></param>
            <param name="publicKey"></param>
            <param name="privateKey"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.encryptData(System.Collections.Generic.List{System.Byte},System.String,System.String)">
            <summary>
            Encrypts the data in plain using shared secret constructed via sender's private key and receveir's public key.
            </summary>
            <param name="plaindata"></param>
            <param name="publicKey"></param>
            <param name="privateKey"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Cryptography.decryptData(System.Collections.Generic.List{System.Byte},System.String,System.String)">
            <summary>
            Decrypts the encrypted data using shared secret constructed via receiver's private key and sender's public key or receiver's public key and sender's privatekey.
            </summary>
            <param name="encryptedText"></param>
            <param name="publicKey"></param>
            <param name="privateKey"></param>
        </member>
        <member name="T:Alexandria.net.API.WalletFunctions.Data">
            <inheritdoc />
            <summary>
            </summary>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Data.#ctor(Alexandria.net.Settings.IConfig,Alexandria.net.Settings.IBlockchainConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Data.Send(Alexandria.net.API.WalletFunctions.SenderData)">
            <summary>
            
            </summary>
            <param name="senderdata"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Data.SendBinary(Alexandria.net.API.WalletFunctions.SenderData)">
            <summary>
            
            </summary>
            <param name="senderdata"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Data.SendBinaryBase58(Alexandria.net.API.WalletFunctions.SenderData)">
            <summary>
            
            </summary>
            <param name="senderdata"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Data.Receive(System.UInt64,Alexandria.net.Enums.SearchType,Alexandria.net.Enums.AccountOwner,Alexandria.net.Enums.StartBy,System.UInt32)">
            <summary>
            Allowed options for search_type are "by_sender", "by_recipient", "by_sender_datetime", "by_recipient_datetime".
            Account is then either sender or recevier, and start is either index od ISO time stamp.
            </summary>
            <param name="AppId">The Id of the application which we are receiving for</param>
            <param name="searchType">based on the Search Type Enum</param>
            <param name="account">Account Owner - sender or receiver</param>
            <param name="start">Start by value - index or ISO time stamp</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Alexandria.net.API.WalletFunctions.Key">
            <inheritdoc />
            <summary>
            </summary>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Key.generate_private_key(System.Byte[])">
            <summary>
            Create a private key
            </summary>
            <param name="privateKey">byte[52] private_key</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Key.get_transaction_digest(System.String,System.Byte[])">
            <summary>
            Create a Transaction digest of the given transaction
            </summary>
            <param name="transaction">string transaction</param>
            <param name="digest">byte[] digest</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Key.sign_digest(System.String,System.String,System.Byte[])">
            <summary>
            Creates signamture for the given transaction and digest
            </summary>
            <param name="digest">string digest</param>
            <param name="privateKey">string private_key</param>
            <param name="signedDigest">byte[] signed_digest</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Key.add_signature(System.String,System.String,System.Byte[])">
            <summary>
            Sign a transcation using the given signature
            </summary>
            <param name="transaction">string transaction</param>
            <param name="signature">string signature</param>
            <param name="signedTx">byte[] signed_tx</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Key.#ctor(Alexandria.net.Settings.IConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Key.generate_private_key_c(System.Byte[])">
            <summary>
            Generates the Private Keys
            </summary>
            <param name="privatekey">the key bytes</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Key.get_transaction_digest_c(System.String,System.Byte[])">
            <summary>
            Gets the transaction digest
            </summary>
            <param name="transaction">the transaction to digest</param>
            <param name="digest">the digest bytes</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Key.sign_digest_c(System.String,System.String,System.Byte[])">
            <summary>
            Creates a signature for the given private key and transaction digest
            </summary>
            <param name="digest">string digest</param>
            <param name="privatekey">string privatekey</param>
            <param name="signeddigest"> byte[] signeddigest</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Key.add_signature_c(System.String,System.String,System.Byte[])">
            <summary>
            Signs the given transactions and returns true for success
            </summary>
            <param name="transaction">string transaction</param>
            <param name="signature">string signature</param>
            <param name="signedtx">byte[] signedtx</param>
            <returns>Returns true if success or false for failed try</returns>
        </member>
        <member name="T:Alexandria.net.API.WalletFunctions.Network">
            <inheritdoc />
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.#ctor(Alexandria.net.Settings.IConfig)">
            <inheritdoc />
            <summary>
            Wallet Constructor
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.isConnected">
            <summary>
            Returns true if the library is connected to a backend.
            </summary>
            <returns>Returns true if success and false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.connect(System.String,System.Int32)">
            <summary>
            Connects to the WS endpoint.
            </summary>
            <param name="host">string host</param>
            <param name="port">int port</param>
            <returns>Returns true if success and false for failed try</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.getTransactionDigest(System.String)">
            <summary>
            Get hash including chain ID (digest), ready to be signed, of a JSON formatted transaction.
            </summary>
            <param name="transaction">string transaction</param>
            <returns>Returns char[] transaction digest</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.makeCustomJsonOperation(System.String,System.Collections.Generic.List{System.String},System.UInt64,System.String)">
            <summary>
            </summary>
            <param name="sender">string sender</param>
            <param name="recipients">List of string recipients</param>
            <param name="appId">ulong appId</param>
            <param name="document">string document</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.makeCustomBinaryOperation(System.String,System.Collections.Generic.List{System.String},System.UInt64,System.Collections.Generic.List{System.Char})">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="recipients"></param>
            <param name="appId"></param>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.makeCustomBinaryBase58Operation(System.String,System.Collections.Generic.List{System.String},System.UInt64,System.String)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="recipients"></param>
            <param name="appId"></param>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.get_received_documents(System.UInt64,System.String,System.String,System.String,System.UInt32)">
            <summary>
            Allowed options for search_type are "by_sender", "by_recipient", "by_sender_datetime", "by_recipient_datetime".
            Account is then either sender or recevier, and start is either index od ISO time stamp.
            </summary>
            <param name="appId"></param>
            <param name="searchType"></param>
            <param name="account"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.makeTransaction(System.Collections.Generic.List{System.String})">
            <summary>
            Form a transaction out of existing operations.
            </summary>
            <param name="operations"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.addSingature(System.String,System.Char[])">
            <summary>
            Add signature to the transaction. Useful fo rmulti-sig transactions,
            where all the signatures have to be calculated and added one by one.
            </summary>
            <param name="transaction"></param>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Network.sendSignedTransaction(System.String)">
            <summary>
            
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:Alexandria.net.API.WalletFunctions.Transaction">
            <inheritdoc />
            <summary>
            All wallet calls to the SophiaTX Blockchain
            </summary>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.#ctor(Alexandria.net.Settings.IConfig)">
            <summary>
            Wallet Constructor
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.About">
            <summary>
            Gets the compile time info
            </summary>
            <returns>Returns compile time info And client And dependencies versions</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.Challenge(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="challenger"></param>
            <param name="challenged"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.get_block(System.Int32)">
            <summary>
            Returns information about the block
            </summary>
            <param name="num">the block num</param>
            <returns>Public block data On the blockchain</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.get_feed_history">
            <summary>
            return the current price feed history
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.get_transaction(System.String)">
            <summary>
            Returns transaction by ID.
            </summary>
            <param name="trxId"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.publish_feed(System.String,System.Decimal)">
            <summary>
            A witness can Public a price feed For the SPHTX:SBD market.
            The median price feed Is used To process conversion requests from SBD To SPHTX.
            </summary>
            <param name="witness">The witness publishing the price feed </param>
            <param name="exchangeRate">The desired exchange rate</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.set_transaction_expiration(System.UInt32)">
            <summary>
            
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.set_voting_proxy(System.String,System.String)">
            <summary>
            Set the voting proxy For an account.
            If a user does Not wish To take an active part In voting, they can choose to allow another account to vote their stake.
            Setting a vote proxy does Not remove your previous votes from the blockchain,
            they remain there but are ignored. If you later null out your vote proxy, your previous votes will take effect again.
            This setting can be changed at any time.
            </summary>
            <param name="accountToModify">the name Or id Of the account To update</param>
            <param name="proxy">the name Of account that should proxy To, Or empty String To have no proxy </param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.withdraw_vesting(System.String,System.Decimal)">
            <summary>
            Set up a vesting withdraw request. The request Is fulfilled once a week over the next two years (104 weeks)
            </summary>
            <param name="from">account vests are drawn from</param>
            <param name="vestingShares">the amount of vests to withdrawover the Next two
                   years. Each week (amount/104) shares are withdrawn And depositted
                   back as STEEM. i.e. "10.000000 VESTS" </param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.Transfer(System.String,System.String,System.Decimal,System.String)">
            <summary>
            Transfer funds from one account To another. SPHTX And SBD can be transferred.
            </summary>
            <param name="from">The account the funds are coming from </param>
            <param name="to">The account the funds are going To </param>
            <param name="amount">The funds being transferred. i.e. "100.000 SPHTX" </param>
            <param name="memo">A memo For the transactionm, encrypted With the To account's</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Transaction.transfer_to_vesting(System.String,System.String,System.Decimal)">
            <summary>
            Transfer STEEM into a vesting fund represented by vesting shares (VESTS).
            VESTS are required To vesting For a minimum Of one coin year And can be
            withdrawn once a week over a two year withdraw period. VESTS are Protected
            against dilution up until 90% Of STEEM Is vesting.
            </summary>
            <param name="from">The account the SPHTX Is coming from </param>
            <param name="to">The account getting the VESTS </param>
            <param name="amount">The amount Of STEEM To vest i.e. "100.00 SPHTX" </param>
            <returns></returns>
        </member>
        <member name="T:Alexandria.net.API.WalletFunctions.Witness">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Witness.#ctor(Alexandria.net.Settings.IConfig)">
            <summary>
            Connects Witness with default values, the runtime values inherited from base class
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Witness.get_active_witnesses">
            <summary>
            Returns the list Of witnesses producing blocks In the current round 
            </summary>
            <returns>Returns json object combining list of active witnesses 
            </returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Witness.get_miner_queue">
            <summary>
            Returns the queue Of pow miners waiting To produce blocks.
            </summary>
            <returns>...</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Witness.get_witness(System.String)">
            <summary>
            Returns information about the given witness.
            </summary>
            <param name="ownerAccount">the name Or id Of the witness account owner, Or the id of the witness</param>
            <returns>the information about the witness stored In the block chain</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Witness.list_witnesses(System.String,System.UInt32)">
            <summary>
            Lists all witnesses registered In the blockchain. This returns a list Of
            all account names that own witnesses, And the associated witness id, sorted
            by name. This lists witnesses whether they are currently voted In Or Not.
            Use the 'lowerbound' and limit parameters to page through the list. To
            retrieve all witnesss, start by setting 'lowerbound' to the empty string
            '""', and then each iteration, pass the last witness name returned as the
            'lowerbound' for the next 'list_witnesss()' call.
            </summary>
            <param name="lowerbound">the name Of the first witness To Return.
            If the named witness does Not exist, the list will start at the witness thatcomes after 'lowerbound'</param>
            <param name="limit">the maximum number Of witnesss To return (max: 1000)</param>
            <returns>Returns a list Of witnesss mapping witness names To witness ids</returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Witness.update_witness(System.String,System.String,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Update a witness Object owned by the given account.
            </summary>
            <param name="witnessName">The name Of the witness's owner account.
            Also accepts the ID of the owner account Or the ID of the witness.</param>
            <param name="url">Same as for create_witness. The empty string makes it remain the same.</param>
            <param name="blockSigningKey">The New block signing public key. The empty string makes it remain the same.</param>
            <param name="props">The chain properties the witness Is voting On. </param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Witness.Vote(System.String,System.String,System.String,System.Int16)">
            <summary>
            Vote on a comment to be paid Sophia
            </summary>
            <param name="voter">The account voting</param>
            <param name="author">The author Of the comment To be voted On</param>
            <param name="permlink">The permlink Of the comment To be voted On. (author, permlink) Is a unique pair</param>
            <param name="weight">The weight [-100,100] Of the vote</param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.Witness.Vote(System.String,System.String,System.Boolean)">
            <summary>
            Vote for a witness to become a block producer. By default an account has not voted positively Or negatively for a witness.
            The account can either vote for with positively votes Or against with negative votes.
            The vote will remain until updated With another vote. Vote strength Is determined by the accounts vesting shares.
            </summary>
            <param name="accountToVoteWith">The account voting For a witness</param>
            <param name="witnessToVoteFor">The witness that Is being voted For</param>
            <param name="approve">true if the account Is voting for the account to be able to be a block produce</param>
            <returns></returns>
        </member>
        <member name="T:Alexandria.net.API.WalletFunctions.StringValueAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alexandria.net.API.WalletFunctions.StringValueAttribute.#ctor(System.String)">
            <inheritdoc />
            <summary>
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Alexandria.net.API.WalletFunctions.StringValueAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alexandria.net.Communication.RpcConnection">
            <summary>
            Abstract Class which manages the sending and receiving of data to and from the blockchain
            </summary>
        </member>
        <member name="M:Alexandria.net.Communication.RpcConnection.#ctor(Alexandria.net.Settings.IConfig,System.Boolean)">
            <summary>
            RPCConnection Constructor
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Alexandria.net.Communication.RpcConnection.SendRequest(System.String,System.Collections.ArrayList)">
            <summary>
            Sends the request to the blockchain
            </summary>
            <param name="method">the method to call</param>
            <param name="params">the parameters to send with the method</param>
            <returns>the http response from ther server</returns>
        </member>
        <member name="M:Alexandria.net.Communication.RpcConnection.ProcessRequest(System.String,System.Collections.ArrayList)">
            <summary>
            Processes the request and gets the response from the server
            </summary>
            <param name="methodname">the method name to call</param>
            <param name="params">the paramaters to pass with the method</param>
            <returns>the http response from the server</returns>
        </member>
        <member name="M:Alexandria.net.Communication.RpcConnection.SendAsync(System.String)">
            <summary>
                Sends the data to the blockchain
            </summary>
            <param name="data">the data to send</param>
            <returns>the response from the send</returns>
        </member>
        <member name="T:Alexandria.net.Core.Daemon">
            <summary>
            Daemon implementation
            </summary>
            <inheritdoc cref="T:Alexandria.net.Communication.RpcConnection"/>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.#ctor(Alexandria.net.Settings.IConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_config">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_dynamic_global_properties">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_chain_properties">
            <summary>
            	
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_current_median_history_price">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_feed_history">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_witness_schedule">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_hardfork_version">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_next_scheduled_hardfork">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_accounts(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="accounts"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.lookup_account_names(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="accounts"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.lookup_accounts(System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="lowerbound"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_account_count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_owner_history(System.String)">
            <summary>
            
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_recovery_request(System.String)">
            <summary>
            
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_block_header(System.Int64)">
            <summary>
            
            </summary>
            <param name="blockId"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_block(System.Int64)">
            <summary>
            
            </summary>
            <param name="blockId"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_witnesses(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="witnesses"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_conversion_requests(System.String)">
            <summary>
            
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_witness_by_account(System.String)">
            <summary>
            
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_witnesses_by_vote(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_witness_count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_active_votes(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="author"></param>
            <param name="permlink"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_content(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="author"></param>
            <param name="permlink"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_content_replies(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="parentPermlink"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_replies_by_last_update(System.String,System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="startAuthor"></param>
            <param name="startPermlink"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Alexandria.net.Core.Daemon.get_discussions_by_author_before_date(System.String,System.String,System.DateTime,System.UInt32)">
            <summary>
            
            </summary>
            <param name="author"></param>
            <param name="startPermlink"></param>
            <param name="beforeDate"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="T:Alexandria.net.Core.SophiaClient">
            <summary>
            The main entry point for accessing the SophiaTX Blockchain
            </summary>
        </member>
        <member name="P:Alexandria.net.Core.SophiaClient.Daemon">
            <summary>
            The blockchain daemon
            </summary>
        </member>
        <member name="P:Alexandria.net.Core.SophiaClient.Wallet">
            <summary>
            the blockchain wallet
            </summary>
        </member>
        <member name="M:Alexandria.net.Core.SophiaClient.#ctor(System.String,System.UInt16,System.UInt16)">
            <summary>
            Client Constructor
            </summary>
            <param name="hostname">the rpc endpoint ip address</param>
            <param name="daemonPort">the daemon rpc endpoint post</param>
            <param name="walletPort">the wallet rpc endpoint post</param>
        </member>
        <member name="T:Alexandria.net.Core.Wallet">
            <summary>
            List of all the functionalities supported by the SophiaTX C# Wallet API
            </summary>
        </member>
        <member name="P:Alexandria.net.Core.Wallet.Account">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Core.Wallet.Asset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Core.Wallet.Cryptography">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Core.Wallet.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Core.Wallet.Network">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Core.Wallet.Transaction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Core.Wallet.Witness">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alexandria.net.Core.Wallet.#ctor(Alexandria.net.Settings.IConfig,Alexandria.net.Settings.IBlockchainConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:Alexandria.net.Enums.AccountOwner">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.AccountOwner.Sender">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.AccountOwner.Receiver">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alexandria.net.Enums.BuildMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.BuildMode.Test">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.BuildMode.Prod">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alexandria.net.Enums.ErrorType">
            <summary>
            e
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.ErrorType.Debug">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.ErrorType.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.ErrorType.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.ErrorType.Verbose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alexandria.net.Enums.SearchType">
            <summary>
            Search Type for receiving data from the Blockchain
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.SearchType.BySender">
            <summary>
            Search by Sender
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.SearchType.ByRecipient">
            <summary>
            Search by Recipient
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.SearchType.BySenderDatetime">
            <summary>
            Search by Sender DateTime (UTC)
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.SearchType.ByRecipientDatetime">
            <summary>
            Search by Receipient DateTime (UTC)
            </summary>
        </member>
        <member name="T:Alexandria.net.Enums.StartBy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.StartBy.Index">
            <summary>
            Search by Sender
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.StartBy.IsoTimeStamp">
            <summary>
            Search by Recipient
            </summary>
        </member>
        <member name="T:Alexandria.net.Enums.TransactionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.TransactionType.SignAndSend">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.TransactionType.MakeSignAndSend">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alexandria.net.Enums.TransactionType.MakeDigestSignAndSend">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alexandria.net.Logging.LoggingType">
            <summary>
            Type which will be used when writing to logs
            </summary>
        </member>
        <member name="F:Alexandria.net.Logging.LoggingType.File">
            <summary>
            Writes to a clef file
            </summary>
        </member>
        <member name="F:Alexandria.net.Logging.LoggingType.Server">
            <summary>
            Writes to the sophia server
            </summary>
        </member>
        <member name="T:Alexandria.net.Messaging.Responses.Authority">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.Authority.WeightThreshold">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.Authority.AccountAuths">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.Authority.KeyAuths">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alexandria.net.Messaging.Responses.DTO.LockUnlockResponse">
            <summary>
            The wallet lock and unlock response
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.DTO.LockUnlockResponse.Id">
            <summary>
            the Id of the call
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.DTO.LockUnlockResponse.Result">
            <summary>
            the result passed back from the blockchain
            </summary>
        </member>
        <member name="T:Alexandria.net.Messaging.Responses.DTO.ReceiverRecipe">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.DTO.ReceiverRecipe.AppId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.DTO.ReceiverRecipe.Sender">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.DTO.ReceiverRecipe.Recipients">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.DTO.ReceiverRecipe.Binary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.DTO.ReceiverRecipe.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Messaging.Responses.DTO.ReceiverRecipe.Document">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alexandria.net.Settings.Config">
            <summary>
            Configuraton object for the build mode, the logging type and the endpoints
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.Config.BuildMode">
            <summary>
            The buildmode: Prod is standard and should be used always,
            Test should be set when the addon is presented for testing
            before release and used to confirm with Sophia 
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.Config.LoggingType">
            <summary>
            The logging type which will be used
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.Config.ReceiveInterval">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.Config.Hostname">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.Config.DaemonPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.Config.WalletPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.Config.Api">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.Config.Version">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alexandria.net.Settings.IBlockchainConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.IBlockchainConfig.IsoTimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.IBlockchainConfig.SearchType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.IBlockchainConfig.Account">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.IBlockchainConfig.Start">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alexandria.net.Settings.IBlockchainConfig.Index">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alexandria.net.Settings.IConfig">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
